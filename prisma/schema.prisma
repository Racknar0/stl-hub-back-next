// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  password             String
  language             String    @default("es") // campo para el idioma del usuario
  tokenExpiration      DateTime? // campo para la expiración del token
  lastLogin            DateTime? // campo para la última vez que se logueó
  resetToken           String? // campo para el token de reseteo de contraseña
  resetTokenExpiration DateTime? // campo para la expiración del token de reseteo
  jwtVersion           Int       @default(1) // campo para la versión del token
  lastPasswordChange   DateTime?
  isActive             Boolean   @default(false) // estado de la cuenta

  roleId Int
  role   role @relation(fields: [roleId], references: [id])

  // Relación con suscripciones
  subscriptions subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model role {
  id   Int    @id @default(autoincrement())
  name String

  users     user[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Suscripción simple: estado, fecha de compra y fecha de finalización del periodo actual
model subscription {
  id               Int                @id @default(autoincrement())
  userId           Int
  user             user               @relation(fields: [userId], references: [id])
  status           SubscriptionStatus @default(ACTIVE)
  startedAt        DateTime           @default(now()) // fecha de compra
  currentPeriodEnd DateTime                          // fecha de finalización

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([userId])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum AccountStatus {
  CONNECTED
  ERROR
  EXPIRED
  SUSPENDED
}

model megaAccount {
  id                Int           @id @default(autoincrement())
  alias             String        @unique
  email             String
  baseFolder        String
  priority          Int           @default(1)
  status            AccountStatus @default(ERROR)
  statusMessage     String?
  suspended         Boolean       @default(false)

  // Métricas
  storageUsedMB     Int           @default(0)
  storageTotalMB    Int           @default(0)
  bandwidthUsedMB   Int           @default(0)
  bandwidthTotalMB  Int           @default(0)
  bandwidthPeriodAt DateTime?
  errors24h         Int           @default(0)

  // Conteos
  fileCount         Int           @default(0)
  folderCount       Int           @default(0)

  lastCheckAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  credentials       accountCredential?
  assets            asset[]
}

model accountCredential {
  id        Int          @id @default(autoincrement())
  accountId Int          @unique
  encData   Bytes        // blob cifrado (AES-GCM)
  encIv     Bytes
  encTag    Bytes
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  account   megaAccount  @relation(fields: [accountId], references: [id])
}

enum AssetStatus {
  DRAFT
  PROCESSING
  PUBLISHED
  FAILED
}

model asset {
  id           Int          @id @default(autoincrement())
  title        String
  slug         String       @unique
  description  String?
  category     String?
  tags         Json?        // array de strings
  isPremium    Boolean      @default(false)

  // Enlace de MEGA (placeholder, se modificará más adelante)
  megaLink     String?

  // Archivo del asset (opcional)
  archiveName  String?
  archiveSizeB Int?
  fileSizeB    Int?         // tamaño persistente del archivo original para mostrar info

  // Imágenes asociadas (array de URLs o nombres)
  images       Json?

  status       AssetStatus  @default(DRAFT)

  // Contador de descargas
  downloads    Int          @default(0)

  // Relación con la cuenta de MEGA
  accountId    Int
  account      megaAccount  @relation(fields: [accountId], references: [id])

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([accountId])
}

model category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
