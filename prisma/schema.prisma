

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  password             String
  language             String    @default("es") // campo para el idioma del usuario
  tokenExpiration      DateTime? // campo para la expiración del token
  lastLogin            DateTime? // campo para la última vez que se logueó
  resetToken           String? // campo para el token de reseteo de contraseña
  resetTokenExpiration DateTime? // campo para la expiración del token de reseteo
  jwtVersion           Int       @default(1) // campo para la versión del token
  lastPasswordChange   DateTime?
  isActive             Boolean   @default(false) // estado de la cuenta

  roleId Int
  role   role @relation(fields: [roleId], references: [id])

  // Relación con suscripciones
  subscriptions subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model role {
  id   Int    @id @default(autoincrement())
  name String

  users     user[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Suscripción simple: estado, fecha de compra y fecha de finalización del periodo actual
model subscription {
  id               Int                @id @default(autoincrement())
  userId           Int
  user             user               @relation(fields: [userId], references: [id])
  status           SubscriptionStatus @default(ACTIVE)
  startedAt        DateTime           @default(now()) // fecha de compra
  currentPeriodEnd DateTime                          // fecha de finalización

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([userId])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum AccountStatus {
  CONNECTED
  ERROR
  EXPIRED
  SUSPENDED
}

model megaAccount {
  id                Int           @id @default(autoincrement())
  alias             String        @unique
  email             String
  baseFolder        String
  type              AccountType   @default(main)
  status            AccountStatus @default(ERROR)
  statusMessage     String?
  suspended         Boolean       @default(false)

  // Métricas
  storageUsedMB     Int           @default(0)
  storageTotalMB    Int           @default(0)
  bandwidthUsedMB   Int           @default(0)
  bandwidthTotalMB  Int           @default(0)
  bandwidthPeriodAt DateTime?
  errors24h         Int           @default(0)

  // Conteos
  fileCount         Int           @default(0)
  folderCount       Int           @default(0)

  lastCheckAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  credentials       accountCredential?
  assets            asset[]
  // Relaciones de backups (self-relation many-to-many a través de megaAccountBackup)
  backups           megaAccountBackup[]    @relation("MainAccountBackups")      // Este account (main) -> backups
  assignedAsBackup  megaAccountBackup[]    @relation("BackupOfMainAccounts")    // Este account (backup) -> mains
  // Réplicas alojadas en esta cuenta cuando actúa como backup
  assetReplicas     AssetReplica[]
}

model megaAccountBackup {
  id              Int         @id @default(autoincrement())
  mainAccountId   Int
  backupAccountId Int
  mainAccount     megaAccount @relation("MainAccountBackups", fields: [mainAccountId], references: [id], onDelete: Cascade)
  backupAccount   megaAccount @relation("BackupOfMainAccounts", fields: [backupAccountId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())

  @@unique([mainAccountId, backupAccountId])
  @@index([backupAccountId])
}

enum AccountType {
  main
  backup
}

model accountCredential {
  id        Int          @id @default(autoincrement())
  accountId Int          @unique
  encData   Bytes        // blob cifrado (AES-GCM)
  encIv     Bytes
  encTag    Bytes
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  account   megaAccount  @relation(fields: [accountId], references: [id])
}

enum AssetStatus {
  DRAFT
  PROCESSING
  PUBLISHED
  FAILED
}

model asset {
  id           Int          @id @default(autoincrement())
  title        String
  titleEn      String?      // nombre en inglés
  slug         String       @unique
  description  String?
  isPremium    Boolean      @default(false)

  // Enlace de MEGA (placeholder, se modificará más adelante)
  megaLink     String?

  // Archivo del asset (opcional)
  archiveName  String?
  archiveSizeB Int?
  fileSizeB    Int?         // tamaño persistente del archivo original para mostrar info

  // Imágenes asociadas (array de URLs o nombres)
  images       Json?

  status       AssetStatus  @default(DRAFT)

  // Contador de descargas
  downloads    Int          @default(0)

  // Relación con la cuenta de MEGA
  accountId    Int
  account      megaAccount  @relation(fields: [accountId], references: [id])

  // Relación muchas-a-muchas con categorías
  categories   category[]

  // Nueva relación muchas-a-muchas con tags
  tags         tag[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  // Réplicas en cuentas backup
  replicas     AssetReplica[]

  @@index([accountId])
}

// Estado de una réplica del asset en cuentas backup
enum ReplicaStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Réplica de un asset en una cuenta backup (soporta múltiples backups futuras)
model AssetReplica {
  id          Int            @id @default(autoincrement())
  assetId     Int
  asset       asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
  accountId   Int
  account     megaAccount    @relation(fields: [accountId], references: [id])
  status      ReplicaStatus  @default(PENDING)
  megaLink    String?
  remotePath  String?
  errorMessage String?
  startedAt   DateTime?
  finishedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([assetId, accountId])
  @@index([accountId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
}

model category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  nameEn      String?  // sinónimo en inglés
  slug        String   @unique
  slugEn      String?  @unique
  description String?
  assets      asset[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  nameEn    String?  // adjetivo en inglés
  slug      String   @unique
  slugEn    String?  @unique

  // Relación inversa M:N con assets
  assets    asset[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Reportes de links rotos
enum BrokenReportStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  REJECTED
}

model BrokenReport {
  id        Int                 @id @default(autoincrement())
  assetId   Int
  note      String?
  status    BrokenReportStatus  @default(NEW)
  createdAt DateTime            @default(now())
  ip        String?
  ua        String?

  @@index([createdAt(sort: Desc)])
  @@index([assetId])
}

// Historial de descargas por usuario (máx 20 por usuario)
model DownloadHistory {
  id           Int      @id @default(autoincrement())
  userId       Int      // No FK, solo referencia
  assetId      Int      // No FK, solo referencia
  assetTitle   String?  // Copia el título del asset al momento de la descarga
  downloadedAt DateTime @default(now())

  @@index([userId])
  @@index([downloadedAt(sort: Desc)])
}

// Notificaciones internas (solo admin por ahora)
enum NotificationStatus {
  UNREAD
  READ
}

// Tipos de notificación
enum NotificationType {
  AUTOMATION
  SALES
  REPORT
}

// Estado visual de la notificación
enum NotificationTypeStatus {
  SUCCESS
  PENDING
  ERROR
}

model Notification {
  id          Int                @id @default(autoincrement())
  title       String
  body        String?
  status      NotificationStatus @default(UNREAD)
  type        NotificationType   @default(AUTOMATION)
  typeStatus  NotificationTypeStatus @default(PENDING)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([status])
}
